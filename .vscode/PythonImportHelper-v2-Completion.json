[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "MathematicsController",
        "kind": 6,
        "importPath": "api.controller.tools.mathematics.mathematicsController",
        "description": "api.controller.tools.mathematics.mathematicsController",
        "peekOfCode": "class MathematicsController:\n    mathematics_router = APIRouter(prefix=\"/api/mathematics\")\n    @mathematics_router.post(\"/percent\")\n    async def calculate_percent(request: PercentRequest):\n        \"\"\"\n        Calculate the percentage of a given value.\n        :param request: PercentRequest containing value and percent.\n        :return: Calculated percentage.\n        \"\"\"\n        calculate_percent = MathematicsTools.calc_percent(request.value, request.percent)",
        "detail": "api.controller.tools.mathematics.mathematicsController",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.controller.tools.mathematics.mathematicsController",
        "description": "api.controller.tools.mathematics.mathematicsController",
        "peekOfCode": "app = FastAPI()\nclass MathematicsController:\n    mathematics_router = APIRouter(prefix=\"/api/mathematics\")\n    @mathematics_router.post(\"/percent\")\n    async def calculate_percent(request: PercentRequest):\n        \"\"\"\n        Calculate the percentage of a given value.\n        :param request: PercentRequest containing value and percent.\n        :return: Calculated percentage.\n        \"\"\"",
        "detail": "api.controller.tools.mathematics.mathematicsController",
        "documentation": {}
    },
    {
        "label": "ConverterController",
        "kind": 6,
        "importPath": "api.controller.tools.unitConverter.converterController",
        "description": "api.controller.tools.unitConverter.converterController",
        "peekOfCode": "class ConverterController:\n    converter_router = APIRouter(prefix=\"/api/converter\")\n    @converter_router.post(\"/length\")\n    async def convert_length(request: LengthConversionRequest):\n        \"\"\"\n        Convert length from one unit to another.\n        :param request: LengthConversionRequest containing value, from_unit, and to_unit.\n        :return: Converted value.\n        \"\"\"\n        converted_value = LengthConverter.convert(",
        "detail": "api.controller.tools.unitConverter.converterController",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.controller.tools.unitConverter.converterController",
        "description": "api.controller.tools.unitConverter.converterController",
        "peekOfCode": "app = FastAPI()\nclass ConverterController:\n    converter_router = APIRouter(prefix=\"/api/converter\")\n    @converter_router.post(\"/length\")\n    async def convert_length(request: LengthConversionRequest):\n        \"\"\"\n        Convert length from one unit to another.\n        :param request: LengthConversionRequest containing value, from_unit, and to_unit.\n        :return: Converted value.\n        \"\"\"",
        "detail": "api.controller.tools.unitConverter.converterController",
        "documentation": {}
    },
    {
        "label": "QrCodeController",
        "kind": 6,
        "importPath": "api.controller.tools.qrCodeGenerator",
        "description": "api.controller.tools.qrCodeGenerator",
        "peekOfCode": "class QrCodeController:\n    qr_code_router = APIRouter(prefix=\"/api/qrcode\")\n    @qr_code_router.post(\"/generate\")\n    async def generate_qrcode(request: QRCodeRequest):\n        try:\n            qr_image = Qrcode.create_custom_qr(\n                data=request.data,\n                color=request.color,\n                background=request.background,\n                logo_path=request.logo_path,",
        "detail": "api.controller.tools.qrCodeGenerator",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.controller.tools.qrCodeGenerator",
        "description": "api.controller.tools.qrCodeGenerator",
        "peekOfCode": "app = FastAPI()\nclass QrCodeController:\n    qr_code_router = APIRouter(prefix=\"/api/qrcode\")\n    @qr_code_router.post(\"/generate\")\n    async def generate_qrcode(request: QRCodeRequest):\n        try:\n            qr_image = Qrcode.create_custom_qr(\n                data=request.data,\n                color=request.color,\n                background=request.background,",
        "detail": "api.controller.tools.qrCodeGenerator",
        "documentation": {}
    },
    {
        "label": "PercentRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class PercentRequest(BaseModel):\n    value: Union[float, int]\n    percent: Union[float, int]\nclass SumRequest(BaseModel):\n    value: List[Union[float, int]]\nclass AverageRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MedianRequest(BaseModel):\n    value: List[Union[float, int]]\nclass StandardDeviationRequest(BaseModel):",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "SumRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class SumRequest(BaseModel):\n    value: List[Union[float, int]]\nclass AverageRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MedianRequest(BaseModel):\n    value: List[Union[float, int]]\nclass StandardDeviationRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MaximumInListRequest(BaseModel):\n    value: List[Union[float, int]]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "AverageRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class AverageRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MedianRequest(BaseModel):\n    value: List[Union[float, int]]\nclass StandardDeviationRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MaximumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MinimumInListRequest(BaseModel):\n    value: List[Union[float, int]]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "MedianRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class MedianRequest(BaseModel):\n    value: List[Union[float, int]]\nclass StandardDeviationRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MaximumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MinimumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass PowerRequest(BaseModel):\n    base: Union[float, int]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "StandardDeviationRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class StandardDeviationRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MaximumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MinimumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass PowerRequest(BaseModel):\n    base: Union[float, int]\n    power: int\nclass FactorialRequest(BaseModel):",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "MaximumInListRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class MaximumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass MinimumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass PowerRequest(BaseModel):\n    base: Union[float, int]\n    power: int\nclass FactorialRequest(BaseModel):\n    n: Union[float, int]\nclass ExponentialRequest(BaseModel):",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "MinimumInListRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class MinimumInListRequest(BaseModel):\n    value: List[Union[float, int]]\nclass PowerRequest(BaseModel):\n    base: Union[float, int]\n    power: int\nclass FactorialRequest(BaseModel):\n    n: Union[float, int]\nclass ExponentialRequest(BaseModel):\n    x: Union[float, int]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "PowerRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class PowerRequest(BaseModel):\n    base: Union[float, int]\n    power: int\nclass FactorialRequest(BaseModel):\n    n: Union[float, int]\nclass ExponentialRequest(BaseModel):\n    x: Union[float, int]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "FactorialRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class FactorialRequest(BaseModel):\n    n: Union[float, int]\nclass ExponentialRequest(BaseModel):\n    x: Union[float, int]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "ExponentialRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.mathematicsRequest",
        "description": "api.model.requestModel.mathematicsRequest",
        "peekOfCode": "class ExponentialRequest(BaseModel):\n    x: Union[float, int]",
        "detail": "api.model.requestModel.mathematicsRequest",
        "documentation": {}
    },
    {
        "label": "QRSize",
        "kind": 6,
        "importPath": "api.model.requestModel.qrCodeRequest",
        "description": "api.model.requestModel.qrCodeRequest",
        "peekOfCode": "class QRSize(str, Enum):\n    XS = \"XS\"\n    S = \"S\"\n    M = \"M\"\n    L = \"L\"\n    XL = \"XL\"\nclass QRCodeRequest(BaseModel):\n    data: str\n    color: str = \"black\"\n    background: str = \"white\"",
        "detail": "api.model.requestModel.qrCodeRequest",
        "documentation": {}
    },
    {
        "label": "QRCodeRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.qrCodeRequest",
        "description": "api.model.requestModel.qrCodeRequest",
        "peekOfCode": "class QRCodeRequest(BaseModel):\n    data: str\n    color: str = \"black\"\n    background: str = \"white\"\n    logo_path: Optional[str] = None\n    size: QRSize = QRSize.M\n    logo_position: str = \"center\"\n    banner_text: Optional[str] = None\n    banner_position: str = \"bottom\"\n    banner_background: str = \"white\"",
        "detail": "api.model.requestModel.qrCodeRequest",
        "documentation": {}
    },
    {
        "label": "LengthConversionRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.unitConverterRequest",
        "description": "api.model.requestModel.unitConverterRequest",
        "peekOfCode": "class LengthConversionRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str \nclass TimeConverterRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str \nclass MassConverterRequest(BaseModel): \n    value: float",
        "detail": "api.model.requestModel.unitConverterRequest",
        "documentation": {}
    },
    {
        "label": "TimeConverterRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.unitConverterRequest",
        "description": "api.model.requestModel.unitConverterRequest",
        "peekOfCode": "class TimeConverterRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str \nclass MassConverterRequest(BaseModel): \n    value: float\n    from_unit: str\n    to_unit: str  \nclass SpeedConverterRequest(BaseModel):\n    value: float",
        "detail": "api.model.requestModel.unitConverterRequest",
        "documentation": {}
    },
    {
        "label": "MassConverterRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.unitConverterRequest",
        "description": "api.model.requestModel.unitConverterRequest",
        "peekOfCode": "class MassConverterRequest(BaseModel): \n    value: float\n    from_unit: str\n    to_unit: str  \nclass SpeedConverterRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str",
        "detail": "api.model.requestModel.unitConverterRequest",
        "documentation": {}
    },
    {
        "label": "SpeedConverterRequest",
        "kind": 6,
        "importPath": "api.model.requestModel.unitConverterRequest",
        "description": "api.model.requestModel.unitConverterRequest",
        "peekOfCode": "class SpeedConverterRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str",
        "detail": "api.model.requestModel.unitConverterRequest",
        "documentation": {}
    },
    {
        "label": "MathematicsTools",
        "kind": 6,
        "importPath": "api.service.mathematics.mathematics",
        "description": "api.service.mathematics.mathematics",
        "peekOfCode": "class MathematicsTools:\n    @staticmethod\n    def calc_percent(value, percent):\n        \"\"\"\n        Calculate the percentage of a given value.\n        :param value: The base value.\n        :param percent: The percentage to calculate.\n        :return: The calculated percentage of the value.\n        \"\"\"\n        return (value * percent) / 100",
        "detail": "api.service.mathematics.mathematics",
        "documentation": {}
    },
    {
        "label": "Qrcode",
        "kind": 6,
        "importPath": "api.service.qrcode.qrcodeGenerator",
        "description": "api.service.qrcode.qrcodeGenerator",
        "peekOfCode": "class Qrcode:\n    def create_custom_qr(data, color=\"black\", background=\"white\", logo_path=None, size=QRSize.M, logo_position=\"center\", \n                         banner_text=None, banner_position=\"bottom\", banner_background=\"white\", banner_text_color=\"black\"):\n        # Define size mappings\n        size_mappings = {\n            QRSize.XS: 4,\n            QRSize.S: 6,\n            QRSize.M: 8,\n            QRSize.L: 10,\n            QRSize.XL: 12",
        "detail": "api.service.qrcode.qrcodeGenerator",
        "documentation": {}
    },
    {
        "label": "LengthConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class LengthConverter:\n    conversion_factors = {\n        'm': 1,           # base unit \n        'km': 1000,       # 1 km = 1000 m\n        'cm': 0.01,       # 1 cm = 0.01 m\n        'mm': 0.001,      # 1 mm = 0.001 m\n        'mile': 1609.34,  # 1 mile = 1609.34 m\n        'yard': 0.9144,   # 1 yard = 0.9144 m\n        'foot': 0.3048,   # 1 foot = 0.3048 m\n        'inch': 0.0254    # 1 inch = 0.0254 m",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "TimeConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class TimeConverter:\n    conversion_factors_time = {\n        'second': 1,          # second is the reference unit\n        'minute': 60,         # 1 minute = 60 seconds\n        'hour': 3600,         # 1 hour = 3600 seconds\n        'day': 86400,         # 1 day = 86400 seconds\n        'week': 604800,       # 1 week = 604800 seconds\n        'month': 2628000,     # approximation: 1 month = 2628000 seconds (30.42 days)\n        'year': 31536000      # approximation: 1 year = 31536000 seconds (365 days)\n    }",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "MassConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class MassConverter:\n    conversion_factors_mass = {\n        'gram': 1,           # gram is the reference unit\n        'kilogram': 1000,    # 1 kilogram = 1000 grams\n        'milligram': 0.001,  # 1 milligram = 0.001 grams\n        'tonne': 1000000,    # 1 tonne = 1000000 grams\n        'ounce': 28.3495,    # 1 ounce = 28.3495 grams\n        'pound': 453.592     # 1 pound = 453.592 grams\n    }\n    @staticmethod",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "SpeedConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class SpeedConverter:\n    conversion_factors_speed = {\n        'm/s': 1,          # meter per second is the reference unit\n        'km/h': 0.277778,  # 1 kilometer per hour = 0.277778 meters per second\n        'mph': 0.44704,    # 1 mile per hour = 0.44704 meters per second\n        'knot': 0.514444   # 1 knot = 0.514444 meters per second\n    }\n    @staticmethod\n    def convert(value, from_unit, to_unit):\n        \"\"\"",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.index",
        "description": "api.index",
        "peekOfCode": "app = FastAPI()\n# Configuration des origines autorisées\norigins = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n    \"https://my-toolbox.vercel.app\",\n    \"http://my-toolbox.vercel.app\",\n    \"*\"\n]\napp.add_middleware(",
        "detail": "api.index",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "api.index",
        "description": "api.index",
        "peekOfCode": "origins = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n    \"https://my-toolbox.vercel.app\",\n    \"http://my-toolbox.vercel.app\",\n    \"*\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # Autoriser ces origines",
        "detail": "api.index",
        "documentation": {}
    }
]