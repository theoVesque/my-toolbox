[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "TestController",
        "kind": 6,
        "importPath": "api.controller.test",
        "description": "api.controller.test",
        "peekOfCode": "class TestController:\n    testRouter  = APIRouter()\n    @testRouter.get(\"/api/python\")\n    def hello_world():\n        return {\"message\": \"Hello World\"}",
        "detail": "api.controller.test",
        "documentation": {}
    },
    {
        "label": "MathematicsTools",
        "kind": 6,
        "importPath": "api.service.mathematics.mathematics",
        "description": "api.service.mathematics.mathematics",
        "peekOfCode": "class MathematicsTools:\n    @staticmethod\n    def calc_percent(value, percent):\n        return (value * percent) / 100\n    @staticmethod\n    def calc_sum(value):\n        s = 0\n        for i in value:\n            s += i\n        return s",
        "detail": "api.service.mathematics.mathematics",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "api.service.mathematics.mathematics",
        "description": "api.service.mathematics.mathematics",
        "peekOfCode": "values = [50, 25, 75, 100, 125]\nprint(\"Moyenne:\", MathematicsTools.average(values))\nprint(\"Médiane:\", MathematicsTools.median(values))\nprint(\"Variance:\", MathematicsTools.variance(values))\nprint(\"Écart type:\", MathematicsTools.standard_deviation(values))\nprint(\"Maximum:\", MathematicsTools.maximum(values))\nprint(\"Minimum:\", MathematicsTools.minimum(values))\nprint(\"Puissance:\", MathematicsTools.power(2, 3))\nprint(\"Factoriel:\", MathematicsTools.factorial(5))\nprint(\"Exponentielle:\", MathematicsTools.exponential(2))",
        "detail": "api.service.mathematics.mathematics",
        "documentation": {}
    },
    {
        "label": "LengthConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class LengthConverter:\n    conversion_factors = {\n            'm': 1,           # base unit \n            'km': 1000,       # 1km = 1000 m\n            'cm': 0.01,       # 1cm = 0.01 m\n            'mm': 0.001,      # 1 mm = 0.001 m\n            'mile': 1609.34,  # 1 mile = 1609.34 m\n            'yard': 0.9144,   # 1 yard = 0.9144 m\n            'foot': 0.3048,   # 1 foot = 0.3048 m\n            'inch': 0.0254    # 1 inch = 0.0254 m",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "TimeConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class TimeConverter:\n    conversion_factors_time = {\n    'second': 1,          # second is the reference unit\n    'minute': 60,         # 1 minute = 60 seconds\n    'hour': 3600,         # 1 hour = 3600 seconds\n    'day': 86400,         # 1 day = 86400 seconds\n    'week': 604800,       # 1 week = 604800 seconds\n    'month': 2628000,     # approximation: 1 month = 2628000 seconds (30.42 days)\n    'year': 31536000      # approximation: 1 year = 31536000 seconds (365 days)\n    }",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "MassConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class MassConverter:\n    conversion_factors_mass = {\n        'gram': 1,           # gram is the reference unit\n        'kilogram': 1000,    # 1 kilogram = 1000 grams\n        'milligram': 0.001,  # 1 milligram = 0.001 grams\n        'tonne': 1000000,    # 1 tonne = 1000000 grams\n        'ounce': 28.3495,    # 1 ounce = 28.3495 grams\n        'pound': 453.592     # 1 pound = 453.592 grams\n    }\n    @staticmethod",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "SpeedConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class SpeedConverter:\n    conversion_factors_speed = {\n        'm/s': 1,          # meter per second is the reference unit\n        'km/h': 0.277778,  # 1 kilometer per hour = 0.277778 meters per second\n        'mph': 0.44704,    # 1 mile per hour = 0.44704 meters per second\n        'knot': 0.514444   # 1 knot = 0.514444 meters per second\n    }\n    @staticmethod\n    def convert(value, from_unit, to_unit):\n        if from_unit not in SpeedConverter.conversion_factors_speed:",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.index",
        "description": "api.index",
        "peekOfCode": "app = FastAPI()\napp.include_router(TestController.testRouter)",
        "detail": "api.index",
        "documentation": {}
    }
]