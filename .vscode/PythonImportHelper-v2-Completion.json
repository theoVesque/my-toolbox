[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "LengthConversionRequest",
        "kind": 6,
        "importPath": "api.controller.unitConverter.converterController",
        "description": "api.controller.unitConverter.converterController",
        "peekOfCode": "class LengthConversionRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str\nclass ConverterController:\n    converter_router = APIRouter(prefix=\"/api/converter\")\n    @converter_router.post(\"/length\")\n    async def convert_length(request: LengthConversionRequest):\n        \"\"\"\n        Convert length from one unit to another.",
        "detail": "api.controller.unitConverter.converterController",
        "documentation": {}
    },
    {
        "label": "ConverterController",
        "kind": 6,
        "importPath": "api.controller.unitConverter.converterController",
        "description": "api.controller.unitConverter.converterController",
        "peekOfCode": "class ConverterController:\n    converter_router = APIRouter(prefix=\"/api/converter\")\n    @converter_router.post(\"/length\")\n    async def convert_length(request: LengthConversionRequest):\n        \"\"\"\n        Convert length from one unit to another.\n        :param request: LengthConversionRequest containing value, from_unit, and to_unit.\n        :return: Converted value.\n        \"\"\"\n        converted_value = LengthConverter.convert(",
        "detail": "api.controller.unitConverter.converterController",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.controller.unitConverter.converterController",
        "description": "api.controller.unitConverter.converterController",
        "peekOfCode": "app = FastAPI()\nclass LengthConversionRequest(BaseModel):\n    value: float\n    from_unit: str\n    to_unit: str\nclass ConverterController:\n    converter_router = APIRouter(prefix=\"/api/converter\")\n    @converter_router.post(\"/length\")\n    async def convert_length(request: LengthConversionRequest):\n        \"\"\"",
        "detail": "api.controller.unitConverter.converterController",
        "documentation": {}
    },
    {
        "label": "TestController",
        "kind": 6,
        "importPath": "api.controller.test",
        "description": "api.controller.test",
        "peekOfCode": "class TestController:\n    testRouter  = APIRouter()\n    @testRouter.get(\"/api/python\")\n    def hello_world():\n        return {\"message\": \"Hello World\"}",
        "detail": "api.controller.test",
        "documentation": {}
    },
    {
        "label": "MathematicsTools",
        "kind": 6,
        "importPath": "api.service.mathematics.mathematics",
        "description": "api.service.mathematics.mathematics",
        "peekOfCode": "class MathematicsTools:\n    @staticmethod\n    def calc_percent(value, percent):\n        \"\"\"\n        Calculate the percentage of a given value.\n        :param value: The base value.\n        :param percent: The percentage to calculate.\n        :return: The calculated percentage of the value.\n        \"\"\"\n        return (value * percent) / 100",
        "detail": "api.service.mathematics.mathematics",
        "documentation": {}
    },
    {
        "label": "LengthConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class LengthConverter:\n    conversion_factors = {\n        'm': 1,           # base unit \n        'km': 1000,       # 1 km = 1000 m\n        'cm': 0.01,       # 1 cm = 0.01 m\n        'mm': 0.001,      # 1 mm = 0.001 m\n        'mile': 1609.34,  # 1 mile = 1609.34 m\n        'yard': 0.9144,   # 1 yard = 0.9144 m\n        'foot': 0.3048,   # 1 foot = 0.3048 m\n        'inch': 0.0254    # 1 inch = 0.0254 m",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "TimeConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class TimeConverter:\n    conversion_factors_time = {\n        'second': 1,          # second is the reference unit\n        'minute': 60,         # 1 minute = 60 seconds\n        'hour': 3600,         # 1 hour = 3600 seconds\n        'day': 86400,         # 1 day = 86400 seconds\n        'week': 604800,       # 1 week = 604800 seconds\n        'month': 2628000,     # approximation: 1 month = 2628000 seconds (30.42 days)\n        'year': 31536000      # approximation: 1 year = 31536000 seconds (365 days)\n    }",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "MassConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class MassConverter:\n    conversion_factors_mass = {\n        'gram': 1,           # gram is the reference unit\n        'kilogram': 1000,    # 1 kilogram = 1000 grams\n        'milligram': 0.001,  # 1 milligram = 0.001 grams\n        'tonne': 1000000,    # 1 tonne = 1000000 grams\n        'ounce': 28.3495,    # 1 ounce = 28.3495 grams\n        'pound': 453.592     # 1 pound = 453.592 grams\n    }\n    @staticmethod",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "SpeedConverter",
        "kind": 6,
        "importPath": "api.service.unitConverter.converter",
        "description": "api.service.unitConverter.converter",
        "peekOfCode": "class SpeedConverter:\n    conversion_factors_speed = {\n        'm/s': 1,          # meter per second is the reference unit\n        'km/h': 0.277778,  # 1 kilometer per hour = 0.277778 meters per second\n        'mph': 0.44704,    # 1 mile per hour = 0.44704 meters per second\n        'knot': 0.514444   # 1 knot = 0.514444 meters per second\n    }\n    @staticmethod\n    def convert(value, from_unit, to_unit):\n        \"\"\"",
        "detail": "api.service.unitConverter.converter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.index",
        "description": "api.index",
        "peekOfCode": "app = FastAPI()\n# Configuration des origines autorisées\norigins = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # Autoriser ces origines\n    allow_credentials=True,",
        "detail": "api.index",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "api.index",
        "description": "api.index",
        "peekOfCode": "origins = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # Autoriser ces origines\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Autoriser toutes les méthodes (GET, POST, etc.)\n    allow_headers=[\"*\"],  # Autoriser tous les headers",
        "detail": "api.index",
        "documentation": {}
    }
]